"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Name: .vimrc (see _vimrc for MS Windows)
" Author: Travis Goldie
" Date: January 2012
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""" Core
filetype plugin indent on
set background=dark
set completeopt=longest,menuone
set autoread

" Set tabs and spaces handling
set tabstop=4
set shiftwidth=4
set expandtab
set mouse=a
set mousemodel=popup_setpos

" Turn on line numbers, set to width, and set color of the line numbers
set number
set numberwidth=2
highlight LineNr ctermfg=Blue
" Use relative counting
"set relativenumber

" set ignorecase smartcase, case-insensitive searching
set ignorecase

" Fix to get Alt key shortcut to work. Maps Escape chars
" to their Alt combinations. For uppercase letters do the
" same except use 'Z'.
let myChar='a'
while myChar <= 'z'
  exec "set <A-".myChar.">=\e".myChar
  exec "imap \e".myChar." <A-".myChar.">"
  let myChar = nr2char(1 + char2nr(myChar))
endw

" Timeout is to tell difference between Meta encoding and hitting 2 keys
set timeout ttimeoutlen=30

" Makes backspace work more natually
fixdel
set backspace=indent,eol,start

" Default keybinding is Ctrl-^
" Insert and command-line mode Caps Lock.
" Lock search keymap to be the same as insert mode.
set imsearch=-1

" Load the keymap that acts like capslock.
set keymap=insert-only_capslock

" Turn it off by default.
set iminsert=0


"""" Bundles ( Vundle )
" XXX Start and end with setting filetype
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

let g:vundle_default_git_proto = 'git'

" Included Bundles
" First let Vundle handle itself
Bundle 'gmarik/vundle'

" Makes motions work on Camel Case boundaries
Bundle 'camelcasemotion'

" Coffeescript support
Bundle 'kchmck/vim-coffee-script'

" Python refactoring tools
Bundle 'klen/python-mode'

" Visual Marks
Bundle 'kshenoy/vim-signature'

" Editor config support for vim
Bundle 'editorconfig/editorconfig-vim'

" Enancement to NERDTree
Bundle 'jistr/vim-nerdtree-tabs'

" Parse objects for properties for omnicompleting
Bundle 'marijnh/tern_for_vim'

" Adds snippets for angular js (Note: need to add to ultis dir list)
Bundle 'matthewsimo/angular-vim-snippets'

" Visual indent guides
Bundle 'nathanaelkane/vim-indent-guides'

" Beable to move blocks of text around
Bundle 'shinokada/dragvisuals.vim'

" Shell within a buffer.
Bundle 'oplatek/Conque-Shell'

" Javascript library syntax
Bundle 'https://github.com/othree/javascript-libraries-syntax.vim.git'
"Bundle 'orthree/javascript-libraries-syntax.vim'

" Improves JS indention and character concealing (script f for function)
Bundle 'pangloss/vim-javascript'

" Auto end brackets
Bundle 'Raimondi/delimitMate'

" File explore
Bundle 'scrooloose/nerdtree'

" Lint all your code
Bundle 'scrooloose/syntastic'

" Comment out code
Bundle 'scrooloose/nerdcommenter'

" Snippets using neocomplete
Bundle 'Shougo/neosnippet'
Bundle 'Shougo/neosnippet-snippets'

" Manage undo tree
Bundle 'sjl/gundo.vim'

" Markdown viewer
Bundle 'suan/vim-instant-markdown'

" Autoclose HTML tags -- XXX Broken for now
Bundle 'sukima/xmledit'

" Support for autoending code blocks
Bundle 'tpope/vim-endwise'

" Git wrapper
Bundle 'tpope/vim-fugitive'

" Haml, SASS, SCSS support
Bundle 'tpope/vim-haml'

" Narkdown syntax
Bundle 'tpope/vim-markdown'

" Allows repeating of plugin commands
Bundle 'tpope/vim-repeat'

" Surrounds words with quotes or parenthesis
Bundle 'tpope/vim-surround'

" Vim Ruby on Rails Support
"Bundle 'tpope/vim-rails'

" Pairs of keys
Bundle 'tpope/vim-unimpaired'

" Snippet manager
"Bundle 'UltiSnips'

" Neocomplete - omnicomplete
"Bundle 'Shougo/neocomplete'
"Bundle 'Shougo/context_filetype.vim'

" Vim session manager
Bundle 'xolox/vim-session'
Bundle 'xolox/vim-misc'

" Vim Ruby Support
Bundle 'vim-ruby/vim-ruby'

" Autoclose Brackets
"Bundle 'vim-scripts/Auto-Pairs'

" Make VIM a Bash IDE
"Bundle 'vim-scripts/bash-support.vim'

" Display Ctags in organized tree
Bundle 'vim-scripts/Tagbar'

" You Complete Me (ycm)
Bundle 'Valloric/YouCompleteMe'

filetype plugin indent on
syntax on

"""" Auto-Pairs
" Note: Check if working with ":imap ("
"let g:AutoPairsShortcutToggle
"let g:AutoPairsShortcutFastWrap
"let g:AutoPairsShortcutJump
"let g:AutoPairsMapBS
"let g:AutoPairsMapCR
"let g:AutoPairsCenterLine

"When g:AutoPairsMapCR is on, center current line after return if the line is at the bottom 1/3 of the window.
"let g:AutoPairsMapSpace
"let g:AutoPairsFlyMode = 0
"let g:AutoPairsShortcutBackInsert


"""" Autocmds Headers
" Update for your system!
let toolsDir = "/home/tgoldie/ui/utils/"

" Note - %:t gives the basename of current file. See filename-modifiers
" For Coffeescript file headers
autocmd bufnewfile *.coffee exe "so " . toolsDir . "coffee_header.txt"
autocmd bufnewfile *.coffee exe "1," . 8 . "g/Creation Date:.*/s//Creation Date: " . strftime("%d %b %Y")

" For JS file headers
autocmd bufnewfile *.js exe "so " . toolsDir . "js_header.txt"
autocmd bufnewfile *.js exe "1," . 8 . "g/Creation Date:.*/s//Creation Date: " . strftime("%d %b %Y")

" For JS Spec file headers
"autocmd bufnewfile *Spec.js exe "so " . toolsDir . "spec_header.txt"
"autocmd bufnewfile *Spec.js exe "1," . 8 . "g/Creation Date:.*/s//Creation Date: " . strftime("%d %b %Y")

" For HTML file headers
"autocmd bufnewfile *.html exe "so " . toolsDir . "html_header.txt"
"autocmd bufnewfile *.html exe "1," . 8 . "g/Creation Date:.*/s//Creation Date: " . strftime("%d %b %Y")

" For SCSS file headers
autocmd bufnewfile *.scss exe "so " . toolsDir . "scss_header.txt"
autocmd bufnewfile *.scss exe "1," . 8 . "g/Creation Date:.*/s//Creation Date: " . strftime("%d %b %Y")

"""" DelimitMate - Autoclose quotes, parenthesis, brackets, etc
"let g:loaded_delimitMate
"let g:delimitMate_autoclose
"let g:delimitMate_matchpairs
"let g:delimitMate_quotes
"let g:delimitMate_nesting_quotes
"let g:delimitMate_expand_cr
"let g:delimitMate_expand_space
"let g:delimitMate_jump_expansion
"let g:delimitMate_smart_quotes
"let g:delimitMate_smart_matchpairs
"let g:delimitMate_balance_matchpairs
"let g:delimitMate_excluded_regions
"let g:delimitMate_excluded_ft
"let g:delimitMate_eol_marker
"let g:delimitMate_apostrophes


"""" Files
" Auto set working dir to current file
set autochdir

" An alternative to the option
"autocmd BufEnter * silent! lcd %:p:h

" Handle using vim on MS Windows
if has("win32") || has("win16")
    let $VIMBACKUP='c:\Users\tgoldie\Dropbox\shared\backup\vimbackup'
endif

"Check to see if dir exists. otherwise use current dir
if !isdirectory( "$VIMBACKUP" )
	:silent !mkdir -p $VIMBACKUP >/dev/null 2>&1
	" :!mkdir -p $VIMBACKUP
endif

" where to put backup files
set backupdir=$VIMBACKUP

" directory to place swap files in
set directory=$VIMBACKUP
set backup

" share system clipboard by default
set clipboard=unnamedplus

" support both, in this order
set fileformats=unix,dos

"""" Gundo
nnoremap <F5> :GundoToggle<CR>

" Settings
"let g:gundo_width = 45
"let g:gundo_preview_bottom = 25
let g:gundo_preview_height = 25
"let g:gundo_right = 0
"let g:gundo_map_move_older = "j"
"let g:gundo_map_move_newer = "k"
"let g:gundo_help = 1
"let g:gundo_disable = 0
"let g:gundo_close_on_revert = 0
"let g:gundo_disable = 0
"let g:gundo_preview_statusline
"let g:gundo_tree_statusline
let g:gundo_auto_preview = 1
"let g:gundo_playback_delay = 60

"""" Python (PyMode) - Refactoring tools
" For Python file headers
let pyHeader = "/home/tgoldie/Dropbox/repos/beeryardtech/scripts/python/py_header.txt"

" Only add autcmd one time
if !exists("autocommands_loaded")
  let autocommands_loaded = 1
  autocmd bufnewfile *.py exe "so " . pyHeader
  autocmd bufnewfile *.py "1," . 15 . 'g/__date__ = .*/s//__date__ = "' . strftime('%d %b %Y') .'"'
endif

" Options
let g:pymode = 1
let g:pymode_warnings = 1
let g:pymode_paths = []
let g:pymode_trim_whitespaces = 1
let g:pymode_options = 1

"let g:pymode_options_max_line_length = 79
let g:pymode_options_max_line_length = 0

let g:pymode_quickfix_minheight = 3
let g:pymode_quickfix_maxheight = 6
let g:pymode_python = 'python'
let g:pymode_indent = 1
let g:pymode_folding = 1
let g:pymode_motion = 1
let g:pymode_doc = 1
let g:pymode_doc_bind = 'K'
let g:pymode_virtualenv = 1
let g:pymode_virtualenv_path = $VIRTUAL_ENV
let g:pymode_run = 1
let g:pymode_run_bind = '<leader>r'
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_bind = '<leader>b'
let g:pymode_breakpoint_cmd = ''
let g:pymode_lint = 1
let g:pymode_lint_on_write = 1
let g:pymode_lint_unmodified = 0
let g:pymode_lint_on_fly = 0

"let g:pymode_lint_message = 1
let g:pymode_lint_message = 0

"let g:pymode_lint_checkers = ['pyflakes', 'pep8', 'mccabe']
let g:pymode_lint_checkers = ['pyflakes']

let g:pymode_lint_ignore = "E501,W"
let g:pymode_lint_select = "E501,W0011,W430"
"ex: let g:pymode_lint_sort = ['E', 'C', 'I']  " Errors first 'E',
let g:pymode_lint_sort = []
let g:pymode_lint_cwindow = 1
let g:pymode_lint_signs = 1
let g:pymode_lint_todo_symbol = 'WW'
let g:pymode_lint_comment_symbol = 'CC'
let g:pymode_lint_visual_symbol = 'RR'
let g:pymode_lint_error_symbol = 'EE'
let g:pymode_lint_info_symbol = 'II'
let g:pymode_lint_pyflakes_symbol = 'FF'

" See https://pep8.readthedocs.org/en/1.4.6/intro.html#configuration
let g:pymode_lint_options_pep8 ={'max_line_length': g:pymode_options_max_line_length}

let g:pymode_lint_options_pyflakes = { 'builtins': '_' }
let g:pymode_lint_options_mccabe = { 'complexity': 12 }
let g:pymode_lint_options_pep257 = {}

" See http://docs.pylint.org/features.html#options
let g:pymode_lint_options_pylint = {'max-line-length': g:pymode_options_max_line_length}

let g:pymode_rope = 1
let g:pymode_rope_lookup_project = 0
let g:pymode_rope_project_root = ""
let g:pymode_rope_ropefolder='.ropeproject'
let g:pymode_rope_show_doc_bind = '<C-c>d'
let g:pymode_rope_regenerate_on_write = 1
let g:pymode_rope_completion = 1
let g:pymode_rope_complete_on_dot = 1
let g:pymode_rope_completion_bind = '<C-Space>'
let g:pymode_rope_autoimport = 1
let g:pymode_rope_autoimport_modules = ['os', 'shutil', 'datetime']
let g:pymode_rope_autoimport_import_after_complete = 0
let g:pymode_rope_goto_definition_cmd = 'new'

"let g:pymode_rope_goto_definition_bind = '<C-c>g'
let g:pymode_rope_goto_definition_bind = '<A-d>'

"let g:pymode_rope_rename_bind = '<C-c>rr'
let g:pymode_rope_rename_bind = '<A-r>'

let g:pymode_rope_rename_module_bind = '<C-c>r1r'

"let g:pymode_rope_organize_imports_bind = '<C-c>ro'
let g:pymode_rope_organize_imports_bind = '<A-o>'

let g:pymode_rope_autoimport_bind = '<C-c>ra'
let g:pymode_rope_module_to_package_bind = '<C-c>r1p'
let g:pymode_rope_extract_method_bind = '<C-c>rm'
let g:pymode_rope_extract_variable_bind = '<C-c>rl'
let g:pymode_rope_use_function_bind = '<C-c>ru'
let g:pymode_rope_move_bind = '<C-c>rv'
let g:pymode_rope_change_signature_bind = '<C-c>rs'
let g:pymode_syntax = 1
let g:pymode_syntax_slow_sync = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_print_as_function = 0
let g:pymode_syntax_highlight_equal_operator = g:pymode_syntax_all
let g:pymode_syntax_highlight_stars_operator = g:pymode_syntax_all
let g:pymode_syntax_highlight_self = g:pymode_syntax_all
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all
let g:pymode_syntax_string_formatting = g:pymode_syntax_all
let g:pymode_syntax_string_format = g:pymode_syntax_all
let g:pymode_syntax_string_templates = g:pymode_syntax_all
let g:pymode_syntax_doctests = g:pymode_syntax_all
let g:pymode_syntax_builtin_objs = g:pymode_syntax_all
let g:pymode_syntax_builtin_types = g:pymode_syntax_all
let g:pymode_syntax_highlight_exceptions = g:pymode_syntax_all
let g:pymode_syntax_docstrings = g:pymode_syntax_all


"""" Map Keys
inoremap jj <Esc>
noremap ; :

" Invert the comment on the current line
inoremap qq <Esc>:execute "normal \<Leader>ci"<CR>

" Leave insert mode when VIM looses keyboard focus
autocmd FocusLost,TabLeave,WinLeave,WinEnter * stopinsert

" Gets full path to file by default
verbose noremap <leader>g1 <C-g>

" If the current buffer has never been saved, it will have no name,
" call the file browser to save it, otherwise just save it.
command! -nargs=0 -bar Update if &modified
                           \|    if empty(bufname('%'))
                           \|        browse confirm write
                           \|    else
                           \|        confirm write
                           \|    endif
                           \|endif

" Save using ctrl-S. WOOT! If in insert mode return to it.
nnoremap <C-s> :<C-u>Update<CR>
inoremap <C-s> <Esc>:Update<CR>
"inoremap <silent> <C-s> <C-o>:Update<CR>

" Make diffs easier
verbose map <C-Up> [c
verbose map <C-Down> ]c

" Surround keymappings
verbose nnoremap <A-y> ysw
verbose nnoremap <A-Y> ysW


"""" Whitespace
function! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd FileType c,cpp,css,scss,html,javascript,java,php,ruby,python autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()


""""" Syntax
"highlight Comment ctermfg=green
highlight OverLength ctermbg=red ctermfg=white guibg=#592929


"""" Visual Drag settings
vmap  <expr>  <LEFT>   DVB_Drag('left')
vmap  <expr>  <RIGHT>  DVB_Drag('right')
vmap  <expr>  <DOWN>   DVB_Drag('down')
vmap  <expr>  <UP>     DVB_Drag('up')
vmap  <expr>  D        DVB_Duplicate()

" Remove any introduced trailing whitespace after moving...
let g:DVB_TrimWS = 1

"""" Folding
set foldenable " Turn on folding
set foldmethod=syntax
"set foldmarker={,} " Fold C style code (only use this as default
                   "" if you use a high foldlevel)
"set foldmethod=marker " Fold on the marker
"set foldmethod=indent
set foldlevel=12
" what movements open folds
set foldopen=block,hor,mark,percent,quickfix,tag


"""" Syntastic
let g:syntastic_check_on_open=1

" CSS Lint
let g:syntastic_csslint_options = ''
let g:syntastic_css_checkers = ['csslint']

" JS Lint


"""" Neocomplete
let g:neocomplete#enable_at_startup = 0
let g:neocomplete#enable_smart_case = 0
let g:neocomplete#sources#syntax#min_keyword_length = 4
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Tab completion, Plugin key mappings
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><C-g> neocomplete#undo_completion()
inoremap <expr><C-l> neocomplete#complete_common_string()
"inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
"inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y> neocomplete#close_popup()
inoremap <expr><C-e> neocomplete#cancel_popup()

" Recommended key-mappings. <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  "return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

" For cursor moving in insert mode(Not recommended)
"inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
"inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
"inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
"inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
" Or set this.
"let g:neocomplete#enable_cursor_hold_i = 1
" Or set this.
"let g:neocomplete#enable_insert_char_pre = 1

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
" Autocompleting tags - http://tdewolf.blogspot.com/2013/05/the-mighty-vim.html
autocmd FileType c set omnifunc=ccomplete#Complete
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
"let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

"""" NERDTree
" Open NERDTree
nnoremap <F6> :NERDTreeToggle<CR>
nnoremap <S-F6> :NERDTreeToggle ~/ui/app<CR>


"""" Neosnippets
" Plugin key-mappings.
"inoremap <C-k>     <Plug>(neosnippet_expand_or_jump)
"imap <C-m> <Plug>(neosnippet_expand_target)
"smap <C-m> <Plug>(neosnippet_expand_or_jump)
"xmap <C-m> <Plug>(neosnippet_expand_target)


" SuperTab like snippets behavior.
"imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
imap <expr><C-k> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)"
    \: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)"
    \: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1

" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/snippets/vim-snippets'


"""" YouCompleteMe (ycm) - enabled as a bundle
" https://github.com/Valloric/YouCompleteMe
" Enables omnicomplete (a la IntelliSense)
"set omnifunc=syntaxcomplete#Complete

" Options - Commentted out ones are default unless otherwise stated
let g:ycm_min_num_of_chars_for_completion = 4
let g:ycm_min_num_identifier_candidate_chars = 0
let g:ycm_auto_trigger = 1
let g:ycm_filetype_whitelist = { '*': 1 }
let g:ycm_filetype_blacklist = {
            \ 'tagbar' : 1,
            \ 'qf' : 1,
            \ 'notes' : 1,
            \ 'markdown' : 0,
            \ 'unite' : 1,
            \ 'text' : 1,
            \ 'vimwiki' : 1,
            \ 'pandoc' : 1
            \}
let g:ycm_filetype_specific_completion_to_disable = {}
let g:ycm_show_diagnostics_ui = 1
let g:ycm_error_symbol = '>>'
let g:ycm_enable_diagnostic_signs = 1
let g:ycm_enable_diagnostic_highlighting = 1
let g:ycm_echo_current_diagnostic = 1
let g:ycm_always_populate_location_list = 0
let g:ycm_open_loclist_on_ycm_diags = 1
let g:ycm_allow_changing_updatetime = 1
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 0
let g:ycm_collect_identifiers_from_tags_files = 0
let g:ycm_seed_identifiers_with_syntax = 0
let g:ycm_extra_conf_vim_data = []
let g:ycm_path_to_python_interpreter = ''
let g:ycm_server_use_vim_stdout = 0
let g:ycm_server_keep_logfiles = 0
let g:ycm_server_log_level = 'info'
let g:ycm_csharp_server_port = 2000
let g:ycm_auto_start_csharp_server = 1
let g:ycm_auto_stop_csharp_server = 1
let g:ycm_add_preview_to_completeopt = 0

let g:ycm_autoclose_preview_window_after_completion = 0  " Set to 1
let g:ycm_autoclose_preview_window_after_insertion = 0
let g:ycm_max_diagnostics_to_display = 30
let g:ycm_key_list_select_completion=['<TAB>', '<Down>']
let g:ycm_key_list_previous_completion = ['<S-TAB>', '<Up>']
let g:ycm_key_invoke_completion = '<C-Space>'
let g:ycm_key_detailed_diagnostics = '<leader>d'
let g:ycm_global_ycm_extra_conf = ''
let g:ycm_confirm_extra_conf = 1
let g:ycm_extra_conf_globlist = []
let g:ycm_filepath_completion_use_working_dir = 0
let g:ycm_semantic_triggers =  {
      \   'c' : ['->', '.'],
      \   'objc' : ['->', '.'],
      \   'ocaml' : ['.', '#'],
      \   'cpp,objcpp' : ['->', '.', '::'],
      \   'perl' : ['->'],
      \   'php' : ['->', '::'],
      \   'cs,java,javascript,d,vim,python,perl6,scala,vb,elixir,go' : ['.'],
      \   'ruby' : ['.', '::'],
      \   'lua' : ['.', ':'],
      \   'erlang' : [':'],
      \ }
let g:ycm_cache_omnifunc = 1
let g:ycm_use_ultisnips_completer = 1


"""" Show the tabbar
nmap <F8> :TagbarToggle<CR>

"""" Ultisnips
"let g:UltiSnipsListSnippets="<F3>"
"let g:UltiSnipsExpandTrigger="<c-h>"
"let g:UltiSnipsJumpForwardTrigger="<c-n>"
"let g:UltiSnipsJumpBackwardTrigger="<c-p>"

"let g:UltiSnipsSnippetDirectories=['UltiSnips', 'AngularSnips', 'BeeryardSnips']


"""" Movement
" Move by row rather than line. Useful for wrapped lines.
nnoremap j gj
nnoremap k gk

" <space> now works like a browser
"nnoremap <space> <C-d>
nnoremap <Space> <PageDown>
noremap <M-space> <PageUp>

" Can move around in insert mode
"inoremap <C-h> <left>
"inoremap <C-j> <down>
"inoremap <C-k> <up>
"inoremap <C-l> <right>

" Move around windows
verbose nmap <C-h> <C-w>h
verbose nmap <C-j> <C-w>j
verbose nmap <C-k> <C-w>k
verbose nmap <C-l> <C-w>l

verbose nmap <C-right> <C-w>h
verbose nmap <C-left> <C-w>j
verbose nmap <C-down> <C-w>k
verbose nmap <C-up> <C-w>l

"""" Fugitive Plugin
" Auto open QuickFix window when grep'ing
autocmd QuickFixCmdPost *grep* cwindow



"""" VIM JS plugin settings
" Autocmd to fix broken regex
autocmd BufRead *.js exe "set regexpengine=1"
autocmd BufRead *.js exe "syntax enable"

" Enable HTML/CSS highlighting in JS file
let javascript_enable_domhtmlcss=0

" Enable JS Code folding
let b:javascript_fold=1

" Use script 'f' for functions and return statements
let g:javascript_conceal=0

" Ignore JSDoc syntax
"let javascript_ignore_javaScriptdoc=0

" Tern - Show argument hints
let tern_show_argument_hints='on_move'

autocmd Filetype javascript nnoremap <A-d> :TernDef<CR>
autocmd Filetype javascript nnoremap <A-r> :TernRename<CR>
autocmd Filetype javascript nnoremap <A-t> :TernRefs<CR>

" Auto adds a ';' to the end of a line.
"autocmd Filetype javascript let b:delimitMate_eol_marker=';'


"""" VIM XML/HTML Plugins
" Disable delimitMate for xml, html files
"let delimitMate_excluded_ft='xml,html'

" Changes when autoclosing - Default type literal '>'
"let xml_tag_completion_map='<c-n>'

" Add support for xsl files
let xml_tag_syntax_prefixes='html\|xml\|xsl\|docbk'

" Close tags like <br> as <br />
let xml_use_xhtml=1


"""" Search
" Toggles highlighting search results in buffer
noremap <F4> :set hlsearch! hlsearch?<CR>

" Jumping lands on top or bottom of screen
verbose nnoremap n nzz
verbose nnoremap } }zz
set incsearch

"""" Status Line
set statusline=%9* " File type
set statusline+=\ %y " File type
set statusline+=\ (%P) " Percent of file
set statusline+=\ %c "Current Column
set statusline+=\:(\%l\/\%L) " Current line number / Total Lines
" set statusline+=\ %{FileSize()}
set statusline+=\ %F " Full file path
set statusline+=\ %m%=%{fugitive#statusline()} " Is file modified

" always show the status line
set laststatus=2

" Show some context while scrolling
set scrolloff=5

""" Spelling (Autocmds)
autocmd BufNewFile,BufRead *.txt,*.md,README set spell
autocmd BufNewFile,BufRead doc/*.txt set nospell
autocmd BufNewFile,BufRead */doc/*.txt set nospell

"""" Conque Shell - Terminal in Vim
" Options - see https://code.google.com/p/conque/wiki/Usage
" Go to insert mode on entering buffer
let g:ConqueTerm_InsertOnEnter = 1

"let g:ConqueTerm_PyVersion = 2
"let g:ConqueTerm_FastMode = 0
let g:ConqueTerm_Color = 0
"let g:ConqueTerm_SessionSupport = 0
let g:ConqueTerm_ReadUnfocused = 0


"let g:ConqueTerm_CloseOnEnd = 0
"let g:ConqueTerm_PromptRegex = '^\w\+@[0-9A-Za-z_.-]\+:[0-9A-Za-z_./\~,:-]\+\$'

" Keyboard
"let g:ConqueTerm_EscKey = '<Esc>'
"let g:ConqueTerm_ToggleKey = '<F8>'
"let g:ConqueTerm_CWInsert = 0
"let g:ConqueTerm_ExecFileKey = '<F11>'
"let g:ConqueTerm_SendFileKey = '<F10>'
"let g:ConqueTerm_SendVisKey = '<F9>'
"let g:ConqueTerm_SendFunctionKeys = 0
"let g:ConqueTerm_TERM = 'vt100'

" Shortcut Keys
command! Bash execute 'ConqueTermSplit bash'
command! Vbash execute 'ConqueTermVSplit bash'
verbose nnoremap <C-w>b :Vbash<CR>
verbose nnoremap <C-w><C-b> :Vbash<CR>
verbose nnoremap <C-w>B :Bash<CR>
verbose nnoremap <C-w><C-B> :Bash<CR>


"""" Tab Pages (window tabs) and Viewports
" Setting for tabline
set switchbuf=usetab
set showtabline=2
set tabpagemax=20

" Split buffer open to the bottom by default
set splitbelow

" When window open, make it equal size
set equalalways

" Create a new tab
verbose noremap <leader>t <Esc>:tabnew<CR>

" Change tags in either normal or insert mode
verbose noremap <A-left>   :tabp<cr>
verbose noremap <A-h>  :tabp<cr>
verbose imap <A-left>  <Esc>:tabp<cr>
verbose imap <A-h> <Esc>:tabp<cr>

verbose noremap <A-right>  :tabn<cr>
verbose noremap <A-l>  :tabn<cr>
verbose imap <A-right>  <Esc>:tabn<cr>
verbose imap <A-l> <Esc>:tabn<cr>

verbose map <A-]> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
verbose map <C-}> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>



"""" Vim Sessions
" See :mksession and xolox bundle

let g:session_directory = $VIMBACKUP
" Options: 'prompt', 'yes', 'no'
let g:session_autosave = 'yes'
let g:session_autosave_periodic = 10
let g:session_default_overwrite = 1
let g:session_extension = '.vim'
let g:session_autoload = 'no'

" Can remove session options - see `:set sessionoptions`
" set sessionoptions-=tabpages
let g:session_default_name = 'session'
"let g:session_verbose_messages = 0
let g:session_default_to_last = 1
"let g:session_persist_globals = []
"let g:session_restart_environment = 0
let g:session_command_aliases = 1
"let g:session_menu
"let g:loaded_session

"""" Whitespace Trimming
function! TrimWhiteSpace()
    %s/\s\+$//e
endfunction
autocmd BufWritePre *.* :call TrimWhiteSpace()
"autocmd BufWritePre *.css,*.html,*.js,*.scss :call TrimWhiteSpace()


"""" Functions
"" NOTE The `!` Means override function on sourcing (prevents error messages).
function! DeleteHiddenBuffers()
    let tpbl=[]
    call map(range(1, tabpagenr('$')), 'extend(tpbl, tabpagebuflist(v:val))')
    for buf in filter(range(1, bufnr('$')), 'bufexists(v:val) && index(tpbl, v:val)==-1')
        silent execute 'bwipeout' buf
    endfor
endfunction

function! FocusLostInsertMode()
    if v:insertmode
        feedkeys("\<C-\>\<C-n>")
    endif
endfunction

function! SimpleFoldText()
    return getline(v:foldstart).' '
endfunction

function! FileSize()
    let bytes = getfsize(expand("%:p"))
    if bytes <= 0
        return ""
    endif
    if bytes < 1024
        return bytes
        return (bytes / 1024) . "K"
    endif
endfunction

function! ClosePair(char)
	if getline('.')[col('.') - 1] == a:char
		return "\<Right>"
	else
		return a:char
	endif
endfunction

function! QuoteDelim(char)
	let line = getline('.')
	let col = col('.')
	if line[col - 2] == "\\"
		" Inserting an escaped (and therefore conditionally asymmetric)
        " quotation mark into the string
		return a:char
	elseif line[col-1] == a:char
		" Escaping out of the string
		return "\<Right>"
	else
		"Starting a string
		return a:char.a:char."\<Esc>i"
	endif
endfunction

function! Taba()
    for newTab in a:000
        call :tabe newTab
    endfor
endfunction

" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
  let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
        \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

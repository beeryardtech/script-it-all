"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Name: .vimrc.funcs
" Author: Travis Goldie
" Date: January 2012
" Description: Functions used by Vim. NOTE The `!` Means
"               override function on sourcing (prevents error messages).
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""
" Name: DeleteHiddenBuffers
" Description: Closes (deletes) all hidden buffers in current session. Useful
" when using session.vim. Keeps the curent session cleaner.
""
function! DeleteHiddenBuffers()
    let tpbl=[]
    call map(range(1, tabpagenr('$')), 'extend(tpbl, tabpagebuflist(v:val))')
    for buf in filter(range(1, bufnr('$')), 'bufexists(v:val) && index(tpbl, v:val)==-1')
        silent execute 'bwipeout' buf
    endfor
endfunction

""
" Name: ReloadTabs
" Command: `Tb` - Executes ReloadTabs()
" Description: Reloads all the windows and tabs. Runs auto resize
" to reset size (using `CTRL-W =`)
""
function! ReloadTabs()
    " Reload all tabs and windows. Then reset window size
    execute "tabdo windo e"
    execute "tabdo normal! ="
endfunction

"" Command
command! Tb call ReloadTabs()

""
" Name: StripTrailingWhitespaces
" Description: Removes any trailing whitespace from a line. Useful for
" cleanup after saving
""
function! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

"" Autocmd
autocmd FileType c,cpp,css,scss,html,javascript,java,php,ruby,python autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

" Sends any ex to a scratch buffer
""
" Name: Scratch
" Param: `command` The command that will be executed and redirected
" Command: `Map` Executes `map`, and gives list of all mapped keybindings
" Command: `Scratch` Executes the Scratch function (without needing to use
" `call Scratch('foo')`
" Command: `Scrtnames` List of scripts (plugins) loaded
" Command: `Syntax` List of syntax rules loaded for current filetype
" Description: Redirects any `ex` command to a new (scratch) buffer. Useful
" for searching or collecting results of a command.
""
function! s:Scratch(command, ...)
   redir => lines
   let saveMore = &more
   set nomore
   execute a:command
   redir END
   let &more = saveMore
   call feedkeys("\<cr>")

   " Create the new buffer here
   tabe | setlocal buftype=nofile bufhidden=hide noswapfile
   put=lines
   if a:0 > 0
      execute 'vglobal/'.a:1.'/delete'
   endif
   if a:command == 'scriptnames'
      %substitute#^[[:space:]]*[[:digit:]]\+:[[:space:]]*##e
   endif
   silent %substitute/\%^\_s*\n\|\_s*\%$
   let height = line('$') + 3
   execute 'normal! z'.height."\<cr>"

   " Return
   0
endfunction

"" Commands
command! -nargs=? Map call <sid>Scratch('map', <f-args>)
command! -nargs=+ Scratch call <sid>Scratch(<f-args>)
command! -nargs=? Scrtnames call <sid>Scratch('scriptnames', <f-args>)
command! -nargs=? Syntax call <sid>Scratch('syntax', <f-args>)


" Execute 'cmd' while redirecting output.
" Delete all lines that do not match regex 'filter' (if not empty).
" Delete any blank lines.
" Delete '<whitespace><number>:<whitespace>' from start of each line.
" Display result in a scratch buffer.
function! s:Filter_lines(cmd, filter)
    let save_more = &more
    set nomore
    redir => lines
    silent execute a:cmd
    redir END
    let &more = save_more
    new
    setlocal buftype=nofile bufhidden=hide noswapfile
    put =lines
    g/^\s*$/d
    %s/^\s*\d\+:\s*//e
    if !empty(a:filter)
        execute 'v/' . a:filter . '/d'
    endif
    0
endfunction
command! -nargs=? Scriptnames call s:Filter_lines('scriptnames', <q-args>)


" Called with a command and a redirection target
"   (see `:help redir` for info on redirection targets)
" Note that since this is executed in function context,
"   in order to target a global variable for redirection you must prefix it with `g:`.
" EG call Redir('ls', '=>g:buffer_list')
function! Redir(command, to)
  exec 'redir '.a:to
  exec a:command
  redir END
endfunction

" The last non-space substring is passed as the redirection target.
" EG
"   :R ls @">
"   " stores the buffer list in the 'unnamed buffer'
" Redirections to variables or files will work,
"   but there must not be a space between the redirection operator and the variable name.
" Also note that in order to redirect to a global variable you have to preface it with `g:`.
"   EG
"     :R ls =>g:buffer_list
"     :R ls >buffer_list.txt
command! -nargs=+ R call call(function('Redir'), split(<q-args>, '\s\(\S\+\s*$\)\@='))

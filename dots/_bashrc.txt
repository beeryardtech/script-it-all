#!/bin/bash
###############################################################################
# Author: Travis Goldie
# Date: January 2012
# Purpose: Basic configurations for the terminal
#				see /usr/share/doc/bash/examples/startup-files
#				(in the package bash-doc) for examples
###############################################################################
#-------------------------------------------------------------
# Source global definitions (if any)
#-------------------------------------------------------------
# If not running interactively, don't do anything
[ -z "$PS1" ] && return

#-------------------------------------------------------------
# File Includes
#-------------------------------------------------------------
# If /etc/bashrc is present, then run.
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

# Enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
# ***Note: in bash_aliases are the SIOS specific stuff***
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

#-------------------------------------------------------------
# Bash history options
#-------------------------------------------------------------
# do not add commands with leading spaces. useful to hide commands
#export HISTCONTROL=ignorespace
# don't put duplicate lines in the history. See bash(1) for more options
export HISTCONTROL=ignoredups
# ... and ignore same sucessive entries. Does both of the above options.
#export HISTCONTROL=ignoreboth

# add time stamp to history entries.
export HISTTIMEFORMAT='%Y-%m-%d %H:%M:%S '

# each time a prompt is shown update the history file
#export PROMPT_COMMAND="history -a;history -n;$PROMPT_COMMAND"
export PROMPT_COMMAND="history -a;$PROMPT_COMMAND"

#Ignore these in history
export HISTIGNORE="exit"

# appends to history rather than overright sessions
shopt -s histappend

# multiline cmds are stored as one line in history
shopt -s cmdhist

#-------------------------------------------------------------
# Cmd Line Editing  Options and Key bindings
#-------------------------------------------------------------
# If a command is a dir, use go to that dir
shopt -s autocd

# Follow symlinks like they are physical links. Default is to treat
# symlinks like physical locations.
# Ex: Given ~/sym --> ~/x/y/z. Cd into ~/sym.
# Default: 'cd ..' will got to ~
# With option: 'cd ..' will go to ~/x/y
#set -o physical

# Includes files and dirs that start with '.' in glob expansions
shopt -s dotglob

# Extended glob functionality
shopt -s extglob

# Used for debugging
shopt -s extdebug

# Error message when shift'ing args too many times
shopt -s shift_verbose

# If set, and Readline is being used, Bash will not attempt to search the
# PATH for possible completions when completion is attempted on an empty line.
shopt -s no_empty_cmd_completion

# Allows the use of vi-like commands in command line
# To update changes need to open a new shell
set -o vi

# If not using VI mode remember to set it to emacs mode
#set -o emacs

#Creates an indicator of which mode (cmd or ins) currently in
#TODO

##---- VI Command Mode -----
# v: keeps from jumping into editing mode
#bind -m vi-command "v":

# ^v and V: use $EDITOR to edit current line
#bind -m vi-command "\A-v":edit-command-line
#bind -m vi-command "V":edit-command-line

# ^e: expand an alias command
bind -m vi-command "\C-e":alias-expand-line

# ZZ: to switch to emacs editing mode
bind -m vi-command "ZZ":emacs-editing-mode

# jj: to switch to insert mode
#bind -m vi-command "jj":emacs-editing-mode

#---- VI Insert Mode -----
# esc: enters command mode and changes prompt
#bind -m vi-insert "\C-[":vi_prompt

# ^a: append to the end of the line
bind -m vi-insert "\C-a":end-of-line

# ^e: expand an alias command
bind -m vi-insert "\C-e":alias-expand-line

# ^l: clear the screen
bind -m vi-insert "\C-l":clear-screen

# ^p: check for partial match in history
bind -m vi-insert "\C-p":dynamic-complete-history

# ^n: cycle through the list of partial matches
bind -m vi-insert "\C-n":menu-complete

# ^t: insert at line start like in emacs mode
bind -m vi-insert "\C-t":beginning-of-line

# ^left: previous word
#bind -m vi-insert "\C-left":vi-prev-word

# ^right: next word
#bind -m vi-insert "\C-right":vi-next-word

#-------------------------------------------------------------
# Bash Window Options
#-------------------------------------------------------------
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"


# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

#-------------------------------------------------------------
# CONSTANTS
#-------------------------------------------------------------
## See http://mediadoneright.com/content/ultimate-git-ps1-bash-prompt
# Color constants instead of escape codes
# Reset
Color_Off="\[\033[0m\]"       # Text Reset

# Regular Colors
Black="\[\033[0;30m\]"        # Black
Red="\[\033[0;31m\]"          # Red
Green="\[\033[0;32m\]"        # Green
Yellow="\[\033[0;33m\]"       # Yellow
Blue="\[\033[0;34m\]"         # Blue
Purple="\[\033[0;35m\]"       # Purple
Cyan="\[\033[0;36m\]"         # Cyan
White="\[\033[0;37m\]"        # White

# Bold
BBlack="\[\033[1;30m\]"       # Black
BRed="\[\033[1;31m\]"         # Red
BGreen="\[\033[1;32m\]"       # Green
BYellow="\[\033[1;33m\]"      # Yellow
BBlue="\[\033[1;34m\]"        # Blue
BPurple="\[\033[1;35m\]"      # Purple
BCyan="\[\033[1;36m\]"        # Cyan
BWhite="\[\033[1;37m\]"       # White

# Underline
UBlack="\[\033[4;30m\]"       # Black
URed="\[\033[4;31m\]"         # Red
UGreen="\[\033[4;32m\]"       # Green
UYellow="\[\033[4;33m\]"      # Yellow
UBlue="\[\033[4;34m\]"        # Blue
UPurple="\[\033[4;35m\]"      # Purple
UCyan="\[\033[4;36m\]"        # Cyan
UWhite="\[\033[4;37m\]"       # White

# Background
On_Black="\[\033[40m\]"       # Black
On_Red="\[\033[41m\]"         # Red
On_Green="\[\033[42m\]"       # Green
On_Yellow="\[\033[43m\]"      # Yellow
On_Blue="\[\033[44m\]"        # Blue
On_Purple="\[\033[45m\]"      # Purple
On_Cyan="\[\033[46m\]"        # Cyan
On_White="\[\033[47m\]"       # White

# High Intensty
IBlack="\[\033[0;90m\]"       # Black
IRed="\[\033[0;91m\]"         # Red
IGreen="\[\033[0;92m\]"       # Green
IYellow="\[\033[0;93m\]"      # Yellow
IBlue="\[\033[0;94m\]"        # Blue
IPurple="\[\033[0;95m\]"      # Purple
ICyan="\[\033[0;96m\]"        # Cyan
IWhite="\[\033[0;97m\]"       # White

# Bold High Intensty
BIBlack="\[\033[1;90m\]"      # Black
BIRed="\[\033[1;91m\]"        # Red
BIGreen="\[\033[1;92m\]"      # Green
BIYellow="\[\033[1;93m\]"     # Yellow
BIBlue="\[\033[1;94m\]"       # Blue
BIPurple="\[\033[1;95m\]"     # Purple
BICyan="\[\033[1;96m\]"       # Cyan
BIWhite="\[\033[1;97m\]"      # White

# High Intensty backgrounds
On_IBlack="\[\033[0;100m\]"   # Black
On_IRed="\[\033[0;101m\]"     # Red
On_IGreen="\[\033[0;102m\]"   # Green
On_IYellow="\[\033[0;103m\]"  # Yellow
On_IBlue="\[\033[0;104m\]"    # Blue
On_IPurple="\[\033[10;95m\]"  # Purple
On_ICyan="\[\033[0;106m\]"    # Cyan
On_IWhite="\[\033[0;107m\]"   # White

# Various variables you might want for your PS1 prompt instead
Time12h="\T"
Time12a="\@"
PathShort="\w"
PathFull="\W"
NewLine="\n"
Jobs="\j"

#-------------------------------------------------------------
# Color Prompt Settings
#-------------------------------------------------------------
# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
     # We have color support; assume it's compliant with Ecma-48
     # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
     # a case would tend to support setf rather than setaf.)
     color_prompt=yes
    else
     color_prompt=
    fi
fi

if [[ ${EUID} == 0 ]] ; then
    #Do not set PS1 for root. Just pass over it and use the default value.
    true
elif [[ "$color_prompt" == yes ]] ; then
    #From default prompt
    #PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\h\[\033[00m\]:\[\033[01;34m\]\W\[\033[00m\]\$ '
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\h\[\033[00m\]:\[\033[01;34m\]\W$(__git_ps1)\[\033[00m\]\$ '
else
    #From default prompt
    #PS1='${debian_chroot:+($debian_chroot)}\u@\h:\W\$ '
    PS1='${debian_chroot:+($debian_chroot)}\u@\W\$ '
fi

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
#PROMPT_COMMAND="history -a;echo -ne \"\033]0;${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007\""
#PROMPT_COMMAND="$PROMPT_COMMAND;echo -ne \"\033]0;${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007\""
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ "$TERM" != "dumb" ] && [ -x /usr/bin/dircolors ]; then
    eval "`dircolors -b`"
fi
# Unset username used above
unset USERNAME color_prompt force_color_prompt

#-------------------------------------------------------------
# Environment Variables
#-------------------------------------------------------------
# User specific environment and startup programs
PATH=$PATH:/opt/ruby/bin
PATH=$PATH:$HOME/Dropbox/repos/nextgen/ui/node_modules/.bin
export PATH=$PATH:$HOME/bin/:/usr/public/bin:/usr/local/etc:.

# Update paths for nodejs
export NODE_PATH="/usr/local/lib/jsctags:${NODE_PATH}"

# Change editor so that will use vim rather than nano
export EDITOR=vim
export DEBUG=false
export TEE=false

# Local Paths
export DROPBOX="${HOME}/Dropbox"
export VIMBACKUP="${DROPBOX}/shared/backup/vimbackup"
export BTSYNC="${HOME}/btsync"
export REPOS=( ~/repos/* ~/Dropbox/repos/* )

# Amazon Web Services
export AWS="ec2-23-20-47-5.compute-1.amazonaws.com"
export AWSUSER="ubuntu"
export AWSKEY="${HOME}/.ssh/aws_lamptest1"
export AWSDYN_PORT=4999

#SSH stuff
export HOMEDNS="beeryardtech.servebeer.com"

#For GPG
export GPG_TTY=$( tty )
#export GNUPGHOME=~/.gnupg

# cd command will search these extra paths.
# export CDPATH=".:~/Dropbox/eBooks-Scripts/Languages/"
export CDPATH="."

# SIOS machines on the network. Either the Windows machines or Linux
export SIOSWIN=( saluda vclient )
export SIOSLIN=( buildrhel4 ci fenric hancock  )
export SIOSVM=( vespasian pertinax )
export SIOSDSK=( beeryard vclient )

# Defaults permissions when a file is created
#077 - read/write/exucute to user, nothing for everyone else
#033 - every one else can only read, owner can read/write
#umask 077
umask 033

#-------------------------------------------------------------
# Execute on Shell Start
#-------------------------------------------------------------
# Map capslock to ctrl key. Disable capslock first.
# Disabling capslock only works on virt terminals.
setleds -v -caps 2> /dev/null || :
setxkbmap -layout us -option ctrl:nocaps

# Tab completion for grunt task runner
eval "$(grunt --completion=bash)"

# Set git aliases
# git config --global --add alias.perm-reset '!git diff -p -R | grep -E "^(diff|(old|new) mode)" | git apply'

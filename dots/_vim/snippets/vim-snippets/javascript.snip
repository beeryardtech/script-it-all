# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${0:// body...};
	};
# Function
snippet fun
	function ${1:function_name}(${2:argument}) {
		${0:// body...};
	}
# Anonymous Function
snippet fu
	function (${1}) {
		${0}
	}${2:;}
# Immediate function
snippet (f
	(function (${1}) {
		${0}
	}(${2}));
# Function as a variable
snippet vfu
    var ${1:name} = function (${2}) {
        ${0};
    };
# if
snippet if
	if (${1:true}) {
		${0}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${0}
	}
# tertiary conditional
snippet ter
	${1:/* condition */} ? ${2:a} : ${0:b}
# switch
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4}
			break;
		${0}
		default:
			${2}
	}
# case
snippet case
	case '${1:case}':
		${2}
		break;
	${0}
# for (...) {...}
snippet for
	for (var ${2:i} = 0, l = ${1:arr}.length; $2 < l; $2 ++) {
		var ${3:v} = $1[$2];${0:}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:arr}.length - 1; $2 >= 0; $2 --) {
		var ${3:v} = $1[$2];${0:}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${0}
	}
# try
snippet try
	try {
		${1}
	} catch (${2:e}) {
		${0:/* handle error */}
	}
# do...while
snippet do
	do {
		${0}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function (${2:attribute}) {
		${0}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function () {${0}}${2}, ${1:10});
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')
# console.log (Firebug)
snippet cl
	console.log(${0});
# return
snippet ret
	return ${0:result}
# for (property in object ) { ... }
snippet fori
	for (var ${1:prop} in ${2:Things}) {
		${0:$2[$1]}
	}
# hasOwnProperty
snippet has
	hasOwnProperty(${0})
# docstring
snippet /**
	/**
     * @ngdoc ${1:type}
     * @name ${2:name}
	 * @description 
	 * ${0:desc}
	 */
snippet @par
	@param {${1:type}} ${2:name} ${0:description}
snippet @ret
	@return {${1:type}} ${0:description}
# JSON.parse
snippet jsonp
	JSON.parse(${0:jstr});
# JSON.stringify
snippet jsons
	JSON.stringify(${0:object});
# self-defining function
snippet sdf
	var ${1:function_name} = function (${2:argument}) {
		${3}

		$1 = function ($2) {
			${0}
		};
	};
# singleton
snippet sing
	function ${1:Singleton} (${2:argument}) {
		// the cached instance
		var instance;

		// rewrite the constructor
		$1 = function $1($2) {
			return instance;
		};

		// carry over the prototype properties
		$1.prototype = this;

		// the instance
		instance = new $1();

		// reset the constructor pointer
		instance.constructor = $1;

		${0}

		return instance;
	}
# Crockford's object function
snippet obj
	function object(o) {
		function F() {}
		F.prototype = o;
		return new F();
	}
# Define multiple properties
snippet props
	var ${1:my_object} = Object.defineProperties(
		${2:new Object()},
		{
			${3:property} : {
				get : function $1_$3_getter() {
					// getter code
				},
				set : function $1_$3_setter(value) {
					// setter code
				},
				value        : ${4:value},
				writeable    : ${5:boolean},
				enumerable   : ${6:boolean},
				configurable : ${0:boolean}
			}
		}
	);
# Define single property
snippet prop
	Object.defineProperty(
		${1:object},
		"${2:property}",
		{
			get : function $1_$2_getter() {
				// getter code
			},
			set : function $1_$2_setter(value) {
				// setter code
			},
			value        : ${3:value},
			writeable    : ${4:boolean},
			enumerable   : ${5:boolean},
			configurable : ${0:boolean}
		}
	);


##
# Angular JS Snippets
##

# Define a new Angular Controller;
# You can change the controller name and parameters
snippet ngc
	var ${1:controllerName} = function(${2:scope}, ${3:injectables}) {
		${4}
	};
# angular.foreach loop
snippet ngfor
	angular.forEach(${1:iterateOver}, function(value, key) {
		${2}
	});
## Module Based Snippets
# A new angular module without a config function
snippet ngm
    /**
    * @ngdoc overview
    * @name ${1}
    * @description
    *
    */
	angular.module('${1:moduleName}', [${2:moduleDependencies}]);
	${3}
# A new angular module without a config function and a variable assignment
snippet ngma
    /**
    * @ngdoc overview
    * @name $1
    * @description
    *
    */
	var ${1:moduleName} = angular.module('$1', [${2:moduleDeps}]);
	${3}
# A new angular module with a config function
snippet ngmc
    /**
    * @ngdoc overview
    * @name $1
    * @description
    *
    */
	var ${1:moduleName} = angular.module('$1', [${2:moduleDeps}], function(${3:configDeps}) {
		${4}
	});
# A factory in a module
snippet ngmfa
	factory('${1:factoryName}', function(${2:dependencies}) {
		${3}
	});
# Define an Angular Module Service to be attached to a previously defined module
# You can change the service name and service injectables
snippet ngms
    /**
    * @ngdoc service
    * @name $1
    * @description
    *
    */
	service('${1:serviceName}', function(${2:injectables}) {
		${3}
	});
# Define an Angular Module Filter to be attached to a previously defined module
# You can change the filter name
snippet ngmfi
	filter('${1:filterName}', function(${2:injectables}) {
		return function(input, ${3:args}) {
			${4}
		};
	});
## Route Based Snippets
# Defines a when condition of an AngularJS route
snippet ngrw
	$routeProvider.when('${1:url}', {
		templateUrl: '${2:templateUrl}',
		controller: '${3:controller}'
	});
	${4}
# Defines a when condition of an AngularJS route with the resolve block
snippet ngrwr
	$routeProvider.when('${1:url}', {
		templateUrl: '${2:templateUrl}',
		controller: '${3:controller}',
		resolve: {
			${4}
		}
	});
	${5}
# Defines an otherwise condition of an AngularJS route
snippet ngro
	$routeProvider.otherwise({
		redirectTo: '${1:url}'
	});
	${2}
## Scope Related Snippets
# Define a new $scope'd function (usually inside an AngularJS Controller)
# You can change the function name and arguments
snippet $f
	$scope.${1:functionName} = function(${2:args}) {
		${3}
	};
# Defines a new $scope'd variable inside an AngularJS controller
snippet $v
	$scope.${1:variable} = ${2:value};
	${3}
# Defines a new $scope'd variable inside an AngularJS controller and assigns a value from a constructor arguments
snippet $va
	$scope.${1:variable} = ${2:variable};
	${3}
# Define a $watch for an expression
# You can change the expression to be watched
snippet $w
	$scope.$watch('${1:watchExpr}', function(newValue, oldValue) {
		${2}
	});
# Define a $on for a $broadcast/$emit on the $scope inside an Angular Controller
# You can change the event name to listen on
snippet $on
	$scope.$on('${1:eventName}', function(event, ${2:args}) {
		${3}
	});
# Define a $broadcast for a $scope inside an Angular Controller / Angular Controller Function
# You can change the event name and optional event arguments
snippet $b
	$scope.$broadcast('${1:eventName}', ${2:eventArgs});
	${3}
# Define an $emit for a $scope inside an Angular Controller / Angular Controller Function
# You can change the event name and optional event arguments
snippet $e
	$scope.$emit('${1:eventName}', ${2:eventArgs});
	${3}
## Directive related snippets
# A compile function
snippet ngdcf
	function compile(tElement, tAttrs, transclude) {
		return function(scope, element, attrs) {
			${1}
		}
	}
# A linking function in a directive
snippet ngdlf
	function(scope, element, attrs${1:ctrl}) {
		${2}
	}
# A directive with a compile function
snippet ngdc
	directive('${1:directiveName}', function factory(${2:injectables}) {
		var directiveDefinitionObject = {
			${3:directiveAttrs},
			compile: function compile(tElement, tAttrs, transclude) {
				return function (scope, element, attrs) {
				
				}
			}
		};
		return directiveDefinitionObject;
	});
# A directive with a linking function only
snippet ngdl
	.directive('${1:directiveName}', function(${2:directiveDeps}) {
		return function(scope, element, attrs${3:ctrl}) {
			${4}
		}
	});

##
# Custom Beeryardtech snippets
## 

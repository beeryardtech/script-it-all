# vim: tabstop=4:shiftwidth=4:expandtab:
# Angular Snippets - Use "an" namespace
global !p
def indentFromOpts(depth = 1):
    #expandtab = snip.opt("expandtab", False)
    #tabstop = snip.opt("tabstop", 8)
    #whitespace = ' ' if expandtab else '\t'
    whitespace = ' '
    tabstop = 4

    indent = whitespace * tabstop * depth

    return indent
# end indentFromOpts

def varInject(args):
    result = ""
    indent = indentFromOpts(3)
    argList = args.lstrip().split(",")

    for arg in argList:
        arg = arg.strip()
        inject = indent + arg.strip('_') + " = " + arg + ";\n"
        result = result + inject

    return result.rstrip()
# end varInject

def varDeps(args):
    """
    Builds list of injectables from the argument list of controller/service.
    Note: Does not need whitespace in front

    Example:
    ```
        # Sample Snippet
        angular.module('$1').service('$2', [
            'Consts',
        `!p snip.rv = varDeps(t[3])`
            function(Consts, ${3:deps}) { }
        ]);

        # Given placeholder $3 (the argument list) , "abc, xyz" --> gives:
        angular.module('$1').service('$2', [
            'Consts',
            'abc',
            'xyz',
            function(Consts, abc, xyz) { }
        ]);
    ```
    """
    result = ""
    argList = args.split(",")

    for arg in argList:
        dep = "    " + "'" + arg.strip() + "',\n"
        result = result + dep

    return result.rstrip()
# end varDeps

def argsFromList(tList):
    """
    Builds list of arguments
    """
    result = ""
    fmtStr = "{0}, "
    count, splitList = listCountSplit(tList)

    index = 0
    while index < count:
        # Want the name of arg (2 element in pair)
        result += fmtStr.format(splitList[index + 1])
        index += 2

    # Remove the extra ", "
    result = result[:-2]

    return result
# end argsFromList

def assertsFromList(tList):
    """
    Builds list of assert statements
    """
    result = ""
    fmtStr = "console.assert({2}({1}), name, '{1} is not {3} {0}!', {1});\n"
    count, splitList = listCountSplit(tList)

    # Maps types to method and artical (a or an)
    types = {
        "array": ( "_.isArray", "an" ),
        "boolean": ( "_.isBoolean", "a" ),
        "function": ( "_.isFunction", "a" ),
        "int": ( "UtilsSrv.isInt", "an" ),
        "null": ( "_.isNull", "a" ),
        "object": ( "_.isPlainObject", "an" ),
        "string": ( "_.isString", "a" )
    }

    # Defaults
    types["arr"] = types["array"]
    types["obj"] = types["object"]

    index = 0
    while index < count:
        typeVal = splitList[index]
        argName = splitList[index + 1]
        method = types.get(typeVal, types["object"])[0]
        artical = types.get(typeVal, types["object"])[1]
        result += fmtStr.format(typeVal, argName, method, artical)
        index += 2

    return result

def paramsFromList(tList):
    """
    Builds list of parameters based on type.
    """
    fmtStr = "* @param {{{0}}} {1}\n"
    count, splitList = listCountSplit(tList)

    # Iterate for each count, and generate the result string
    index = 0
    result = ""
    while index < count:
        result += fmtStr.format(splitList[index], splitList[index + 1])
        index += 2

    return result;
# end paramsFromList

def listCountSplit(inStr):
    # Odd length list. Do not count the new entry yet
    splitList = inStr.replace('//', '').split(' ');
    splitListLen = len(splitList)
    count = ( splitListLen ) if splitListLen % 2 == 0 else splitListLen - 1

    return (count, splitList)
# end listCountSplit

def modFromFileName():
    """
    Creates the module used in ngdoc from file name
    """
    result = snip.basename
    result = result.replace('Api', '').replace('Consts', '').replace('Ctrl', '')
    return result.replace('Spec', '').replace('Srv', '')
# end modFromFileName

def srvFromFileName():
    """
    Creates the module used in ngdoc from file name.

    Removes "Spec" and "Provider" from filename.
    """
    result = snip.basename
    return result.replace('Spec', '').replace('Provider', '');
# end srvFromFileName

endglobal

###
# Class/Services
###
snippet anmod "A new angular module without a config function."
/**
* @ngdoc interface
* @name ${1:moduleName}
* @description
* $0
*/
angular.module('$1', [
    ${2:moduleDependencies}
]);
endsnippet


snippet anc "Define a new Angular Controller. You can change the controller name and parameters."
/**
* @ngdoc service
* @name ${1:`!p snip.rv = modFromFileName()`}.${2:`!p snip.rv = srvFromFileName()`}
* @type function
* @requires ng.$scope
* @description
*/
angular.module('$1').controller('$2', [
    '$scope',
`!p snip.rv = varDeps(t[3])`
    function($scope, ${3:deps}) {
        var self = this;
        var name = '$1.$2';
        $0
    }
]);
endsnippet


snippet anp "Define a Angular Provider. Includes the $get method."
/**
* @ngdoc service
* @name ${1:`!p snip.rv = modFromFileName().replace('Provider', '')`}.${2:`!p snip.rv = srvFromFileName() + 'Provider'`}
* @type {function}
* @description
*/
angular.module('$1').provider('${4:`!p snip.rv = t[2].replace('Provider', '')`}', [
    'Consts',
`!p snip.rv = varDeps(t[3])`
    function(Consts, ${3:deps}) {
        var self = this;
        var name = '$1.$2';

        $0

        // *** Finally: Add $get method ***
        self.$get = function() {
            return self;
        };
    }
]);
endsnippet


snippet ans "Define a Angular Service. Set service name and injectables."
/**
* @ngdoc service
* @name ${1:`!p snip.rv = modFromFileName()`}.${2:`!p snip.rv = srvFromFileName()`}
* @type function
* @description
*/
angular.module('$1').service('$2', [
    'Consts',
`!p snip.rv = varDeps(t[3])`
    function(Consts, ${3:deps}) {
        var self = this;
        var name = '$1.$2';
        $0
    }
]);
endsnippet


snippet andl "Define directive with a linking function."
/**
* @ngdoc directive
* @name ${1:`!p snip.rv = modFromFileName()`}.${2:`!p snip.rv = srvFromFileName()`}
${8:`!p snip.rv = paramsFromList(t[4])`}
* @requires ng.$scope
* @restrict ${6:EA}
* @description
*
* @example
* <doc:example module="$1">
*    <doc:source>
*        <script>
*        </script>
*    </doc:source>
* </doc:example>
*/
angular.module('$1').directive('$2', [
`!p snip.rv = varDeps(t[7])`
    function(${7:Templates}) {
        return {
            controller: [
                '$scope',
            `!p snip.rv = varDeps(t[8])`
                function($scope, ${8:ctrlDeps}) {
                    var self = this;
                    var name = '$1.$2#ctrl';
                    $0
                    //${4:argList}
                }
            ],
            link: function(scope, element, attrs, ctrl) {
                var name = '$1.$2#link';
            },
            restrict: '$6',
            scope: {
            },
            template: Template.HTML.DEFAULT,
        };
    }
]);
endsnippet


###
# Methods
###
snippet anm "Define a service's method"
/**
* @ngdoc method
* @name ${1:methodName}
* @methodOf ${2:`!p snip.rv = modFromFileName()`}.${3:`!p snip.rv = srvFromFileName()`}
${7:`!p snip.rv = paramsFromList(snip.v.text)`}
* @return {${5}} ${6}
* @description
*
*/
self.$1 = function(${8:`!p snip.rv = argsFromList(snip.v.text)`}) {
    var name = '$3.$1';

    ${9:`!p snip.rv = assertsFromList(snip.v.text)`}

    $0
    return;
};
endsnippet


snippet anm2 "Define a service's method"
/**
* @ngdoc method
* @name ${1:methodName}
* @methodOf ${2:`!p snip.rv = modFromFileName()`}.${3:`!p snip.rv = srvFromFileName()`}
${7:`!p snip.rv = paramsFromList(t[4])`}
* @return {${5}} ${6}
* @description
*
*/
self.$1 = function(${8:`!p snip.rv = argsFromList(t[4])`}) {
    var name = '$3.$1';
    ${4:argList}

${9:`!p snip.rv = assertsFromList(t[4])`}

    $0
    return;
};
endsnippet


###
# Properties
###
snippet anw "Define a $watch for an expression. You can change the expression to be watched."
/**
* @ngdoc property
* @name WATCH_${1:expr}
* @propertyOf ${2:`!p snip.rv = modFromFileName()`}.${3:`!p snip.rv = srvFromFileName()`}
* @type function
* @description
* Watcher for $4.
*/
$scope = CtrlUtilsSrv.registerWatch($scope, ${4:binding}, $1, ${5:fn});
endsnippet


snippet anw "Define a $watch for an expression. You can change the expression to be watched."
/**
* @ngdoc property
* @name WATCH_${1:expr}
* @propertyOf ${2:`!p snip.rv = modFromFileName()`}.${3:`!p snip.rv = srvFromFileName()`}
* @type function
* @description
* Watcher for the collection $4.
*/
$scope = CtrlUtilsSrv.registerWatchColl($scope, ${4:binding}, $1, ${5:fn});
endsnippet


snippet anon "Define a $on for a $broadcast/$emit on the $scope inside Controller."
/**
* @ngdoc property
* @name ${1:expr}
* @propertyOf ${2:`!p snip.rv = modFromFileName()`}.${3:`!p snip.rv = srvFromFileName()`}
* @type function
* @description
* Event listener for $4.
*/
$scope = CtrlUtilsSrv.registerOn($scope, ${4:binding}, $1, ${5:fn});
endsnippet

###
# Tests
###
snippet befm "Creates before each to define variables"
var ${1:vars};
beforeEach(function() {
    $0
});
endsnippet

snippet desci "Define top describe()"
/**
 * @ngdoc interface
 * @name ${1:`!p snip.rv = modFromFileName()`}.${2:`!p snip.rv = srvFromFileName()`}
 * @description
 */
describe('$1: $2', function() {
    var assertSpy, sinceDiffLog, UtilsSrv, UtSrv, ut;
    var $2;

    /**
     * Boilerplate beforeEach. Update module and injectables
     */
    beforeEach(function() {
        module('Ut', 'Common', '$1');
        inject(function(_$2_, _UtSrv_, _UtilsSrv_, ${3:injectables}) {
            $2 = _$2_;
            UtSrv = _UtSrv_;
            UtilsSrv = _UtilsSrv_;
    `!p snip.rv = varInject(t[3])`
        });

        // Get common data for unit tests
        ut = new UtSrv.getVariables();
        this.addMatchers(new UtSrv.matchers());
        assertSpy = UtSrv.assertSpy();
        sinceDiffLog = UtSrv.sinceDiffLog(UtilsSrv);
    });
    $0
});
endsnippet


snippet descm "Define describe() with should exist it()"
describe('${1:method}', function() {
    it('should exist', function() {
        expect(_.isFunction(${2:`!p snip.rv = srvFromFileName()`}.$1)).toBeTrue();
    });

    var result, validResult;
    beforeEach(function() {
        $0
    });

    it('should ', function() {
        result = $2.$1(${3:args});
        expect(result).toEqual(validResult);
    });
});
endsnippet


snippet descp "Define describe() to test Provider's $get method"
describe('$get', function() {
    it('should exist', function() {
        expect(_.isFunction(${1:`!p snip.rv = srvFromFileName()`}.$get)).toBeTrue();
    });

    var result;
    it('should return instance of provider', function() {
        result = $1.$get();
        expect(result).toBe($1);
    });
});
endsnippet


snippet expt "Expect() to be true"
expect($0).toBeTrue();
endsnippet


snippet expf "Expect() to be false"
expect($0).toBeFalse();
endsnippet


snippet expa "Expect assert failed."
expect(assertSpy.stcAssertFail()).toBeTrue();
endsnippet


snippet itf "Define it with function"
it('should ${1}', function() {
    expect(${2}).$0;
});
endsnippet


snippet ita "Define it to expect assert"
it('should ${1}', function() {
    expect(${2}).$0;
    expect(assertSpy.stcAssertFail()).toBeTrue();
});
endsnippet


snippet itth "Define it with toThrow"
it('should throw error when ${1:message}', function() {
    expect(function() { $0; }).toThrow();
});
endsnippet


# vim: tabstop=4:shiftwidth=4:expandtab:
# Angular Snippets - Use "an" namespace


###
# Python Helper Functions
###
global !p
def indentFromOpts(depth=1):
    #expandtab = snip.opt("expandtab", False)
    #tabstop = snip.opt("tabstop", 8)
    #whitespace = ' ' if expandtab else '\t'
    whitespace = ' '
    tabstop = 4

    indent = whitespace * tabstop * depth

    return indent
# end indentFromOpts

def varInject(args):
    result = ""
    indent = indentFromOpts(3)
    argList = args.lstrip().split(",")

    for arg in argList:
        arg = arg.strip()
        inject = indent + arg.strip('_') + " = " + arg + ";\n"
        result = result + inject

    return result.rstrip()

# end varInject

def varDeps(args):
    """
        Builds list of injectables from the argument list of controller/service.
        Note: Does not need whitespace in front

        Example:
        ```
            # Sample Snippet
            angular.module('$1').service('$2', [
                'Consts',
            `!p snip.rv = varDeps(t[3])`
                function(Consts, ${3:deps}) { }
            ]);

            # Given placeholder $3 (the argument list) , "abc, xyz" --> gives:
            angular.module('$1').service('$2', [
                'Consts',
                'abc',
                'xyz',
                function(Consts, abc, xyz) { }
            ]);
        ```
    """
    result = ""
    argList = args.split(",")

    for arg in argList:
        dep = "    " + "'" + arg.strip() + "',\n"
        result = result + dep

    return result.rstrip()
# end varDeps

endglobal

###
# Class/Services
###
snippet anmod "A new angular module without a config function."
/**
* @ngdoc interface
* @name ${1:moduleName}
* @description
* $0
*/
angular.module('$1', [
    ${2:moduleDependencies}
]);
endsnippet


snippet anc "Define a new Angular Controller. You can change the controller name and parameters."
/**
* @ngdoc service
* @name ${1:moduleName}.${2:controllerName}
* @type function
* @requires ng.$scope
* @description
*/
angular.module('$1').controller('$2', [
    '$scope',
`!p snip.rv = varDeps(t[3])`
    function($scope, ${3:deps}) {
        var self = this;
        var name = '$1.$2';
        $0
    }
]);
endsnippet


snippet ans "Define a Angular Service. Set service name and injectables."
/**
* @ngdoc service
* @name ${1:moduleName}.${2:serviceName}
* @type function
* @description
*/
angular.module('$1').service('$2', [
    'Consts',
`!p snip.rv = varDeps(t[3])`
    function(Consts, ${3:deps}) {
        var self = this;
        var name = '$1.$2';
        $0
    }
]);
endsnippet


snippet andl "Define directive with a linking function."
/**
* @ngdoc directive
* @name ${1:moduleName}.${2:directiveName}
* @param {${3:paramType}} ${4:param} ${5:paramDesc}
* @requires ng.$scope
* @restrict ${6:EA}
* @description
*
* @example
* <doc:example module="$1">
*    <doc:source>
*        <script>
*        </script>
*    </doc:source>
* </doc:example>
*/
angular.module('$1').directive('$2', [
`!p snip.rv = varDeps(t[7])`
    function(${7:Templates}) {
        return {
            controller: [
                '$scope',
            `!p snip.rv = varDeps(t[8])`
                function($scope, ${8:ctrlDeps}) {
                    var self = this;
                    var name = '$1.$2#ctrl';
                    $0
                }
            ],
            link: function(scope, element, attrs, ctrl) {
                var name = '$1.$2#link';
            },
            restrict: '$6',
            scope: {
                $4: '@$4',
            },
            template: Template.HTML.DEFAULT,
        };
    }
]);
endsnippet


###
# Methods
###
snippet anm "Define a service's method"
/**
* @ngdoc method
* @name ${1:methodName}
* @methodOf ${2:mod}.${3:service}
* @param {${4}} ${5} ${6}
* @return {${7}} ${8}
* @description
*
*/
self.$1 = function($5) {
    var name = '$3.$1';

    $0
    return;
};
endsnippet


###
# Properties
###
snippet anw "Define a $watch for an expression. You can change the expression to be watched."
/**
* @ngdoc property
* @name WATCH_${2:expr}
* @propertyOf ${3:pOf}
* @description
*/
$scope.WATCH_$2 = $scope.$watch(${1:watchExpr}, function(newVal, oldVal) {
    if(_.isUndefined(newVal)) {
        return;
    }
    $0
});
endsnippet


snippet anon "Define a $on for a $broadcast/$emit on the $scope inside Controller."
/**
* @ngdoc property
* @name ${2:onName}
* @propertyOf ${3:pOf}
* @type function
* @description
*/
$scope.$2 = $scope.$on(${1:eventName}, function(event, eventData) {
    $0
});
endsnippet

###
# Tests
###
snippet befm "Creates before each to define variables"
var ${1:vars};
beforeEach(function() {
    $0
});
endsnippet


snippet descm "Define describe() with it() should should exist"
describe('${1:method}', function() {
    it('should exist', function() {
        expect(_.isFunction(${2:service}.$1)).toBeTrue();
    });

    $0
});
endsnippet


snippet desci "Define top describe()"
/**
 * @ngdoc interface
 * @name ${1:moduleName}.${2:serviceName}
 * @description
 */
describe('$1: $2', function() {
    var assertSpy;
    var $2;
    var sinceDiffLog;
    var UtilsSrv;
    var UtSrv;
    var ut;

    /**
     * Boilerplate beforeEach. Update module and injectables
     */
    beforeEach(function() {
        module('Ut', 'Common', '$1');
        inject(function(_$2_, _UtSrv_, _UtilsSrv_, ${3:injectables}) {
            $2 = _$2_;
            UtSrv = _UtSrv_;
            UtilsSrv = _UtilsSrv_;
`!p snip.rv = varInject(t[3])`
        });

        // Get common data for unit tests
        ut = new UtSrv.getVariables();
        this.addMatchers(new UtSrv.matchers());
        assertSpy = UtSrv.assertSpy();
        sinceDiffLog = UtSrv.sinceDiffLog(UtilsSrv);
    });

    $0
});
endsnippet

snippet expt "Expect() to be true"
expect($0).toBeTrue();
endsnippet


snippet expf "Expect() to be false"
expect($0).toBeFalse();
endsnippet


snippet expa "Expect assert failed."
expect(assertSpy.stcAssertFail()).toBeTrue();
endsnippet


snippet itf "Define it with function"
it('should ${1}', function() {
    expect(${2}).$0;
});
endsnippet


snippet ita "Define it to expect assert"
it('should ${1}', function() {
    expect(${2}).$0;
    expect(assertSpy.stcAssertFail()).toBeTrue();
});
endsnippet


snippet itth "Define it with toThrow"
it('should throw error when ${1:message}', function() {
    expect(function() { $0; }).toThrow();
});
endsnippet


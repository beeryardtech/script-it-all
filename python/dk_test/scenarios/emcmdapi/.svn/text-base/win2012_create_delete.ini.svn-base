#-------------------------------------------------------------------------------
# Name:        create_delete.ini
# Author:      Travis Goldie
# Created:     11/03/2012
# Copyright:   (c) SIOS Technology Corp 2012
#-------------------------------------------------------------------------------
[settings]
repeat=1
scenarioName=create_delete
sleep=5.0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Testing Creates and Deletes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[defaults/createmirror]
expectedRetCode=${returnCodes:success}
expectedOutput="emcmd_returncode"
app=${apps:emcmd}
system=${node1:ip0}
cmd="CREATEMIRROR"
volume=${node1:volume0}
target=${node2:ip0}
type=s
options=

[defaults/getmirrorvolinfo]
expectedRetCode=${returnCodes:success}
app=${apps:emcmd}
system=${node1:ip0}
cmd="GETMIRRORVOLINFO"
volume=${node1:volume0}

[defaults/deletemirror]
expectedRetCode=${returnCodes:success}
expectedOutput="emcmd_returncode"
app=${apps:emcmd}
system=${node1:ip0}
cmd="DELETEMIRROR"
volume=${node1:volume0}
target=

[emcmd_success_async_local_ip0/createmirror]
;; Test Assertion:
;; Create an ASYNC mirror on node1 to node2, get its volinfo, then delete it.
type=a

[emcmd_success_async_local_ip0/getmirrorvolinfo]

[emcmd_success_async_local_ip0/deletemirror]

[emcmd_success_sync_local_ip0/createmirror]
;; Test Assertion:
;; Create a SYNC mirror on node1 to node2, get its volinfo, then delete it.
type=s

[emcmd_success_sync_local_ip0/getmirrorvolinfo]

[emcmd_success_sync_local_ip0/deletemirror]



[emcmd_success_async_remote_ip0/createmirror]
;; Test Assertion:
;; Create an ASYNC mirror on node2 to node1, get its volinfo, then delete it.
system=${node2:ip0}
volume=${node2:volume0}
target=${node1:ip0}
type=a

[emcmd_success_async_remote_ip0/getmirrorvolinfo]

[emcmd_success_async_remote_ip0/deletemirror]
system=${node2:ip0}
volume=${node2:volume0}


[emcmd_success_sync_remote_ip0/createmirror]
;; Test Assertion:
;; Create an SYNC mirror on node2 to node1, get its volinfo, then delete it.
system=${node2:ip0}
volume=${node2:volume0}
target=${node1:ip0}
type=a

[emcmd_success_sync_remote_ip0/getmirrorvolinfo]

[emcmd_success_sync_remote_ip0/deletemirror]
system=${node2:ip0}
volume=${node2:volume0}



[emcmd_fail_async_remote_delete_ip0/createmirror]
;; Test Assertion:
;; Create an ASYNC mirror on node1 to node2, get its volinfo, then try
;; to delete it from the target (node2). This will fail.
;; Finally do a delete on node1 to get ready for next test.
system=${node1:ip0}
volume=${node1:volume0}
target=${node2:ip0}
type=a

[emcmd_fail_async_remote_delete_ip0/getmirrorvolinfo]

[emcmd_fail_async_remote_delete_ip0/deletemirror]
expectedretcode=${returnCodes:unknown_command}
system=${node2:ip0}
volume=${node2:volume0}


[cleanup_01/deletemirror]
;; Cleans up after last test


[emcmd_success_async_delete_target_ip0/createmirror]
;; Test Assertion:
;; Create an ASYNC mirror on node1 to node2, get its volinfo, then deletes
;; the mirror by specifying the target as node2.
system=${node1:ip0}
volume=${node1:volume0}
target=${node2:ip0}
type=a

[emcmd_success_async_delete_target_ip0/getmirrorvolinfo]

[emcmd_success_async_delete_target_ip0/deletemirror]
expectedretcode=${returnCodes:success}
system=${node1:ip0}
volume=${node1:volume0}
target=${node2:ip0}


























